import { supabase, isDemoMode } from './supabase'
import { getCurrentUser } from './auth'
import { Project, Script, GeneratedImage } from './types'

// Demo mode data storage
let demoProjects: Project[] = [
  {
    id: 'demo_project_1',
    name: 'Sample Creative Project',
    description: 'A demo project to showcase the creative workbench functionality',
    created_at: new Date(Date.now() - 86400000).toISOString(), // 1 day ago
    user_id: 'admin_001'
  }
]
let demoScripts: Script[] = [
  {
    id: 'demo_script_1',
    project_id: 'demo_project_1',
    content: [
      {
        id: 'segment_1',
        scene: 'A peaceful forest clearing at dawn',
        prompt: 'A serene forest clearing bathed in golden morning light, with mist rising from the ground, tall pine trees surrounding the clearing, wildflowers scattered across the grass, a small stream flowing through the center',
        characters: ['narrator', 'forest creatures'],
        setting: 'Enchanted forest',
        mood: 'Peaceful and magical'
      },
      {
        id: 'segment_2',
        scene: 'A mysterious cave entrance',
        prompt: 'A dark, mysterious cave entrance hidden behind hanging vines, ancient runes carved into the stone walls, glowing crystals providing dim illumination, shadows suggesting unknown depths',
        characters: ['explorer', 'ancient spirit'],
        setting: 'Ancient cave',
        mood: 'Mysterious and adventurous'
      }
    ],
    status: 'draft',
    created_at: new Date(Date.now() - 43200000).toISOString() // 12 hours ago
  }
]
let demoImages: GeneratedImage[] = []

// 项目相关操作
export async function createProject(name: string, description: string): Promise<Project> {
  const user = getCurrentUser()

  if (isDemoMode) {
    const project: Project = {
      id: `demo_${Date.now()}`,
      name,
      description,
      user_id: user.id,
      created_at: new Date().toISOString()
    }
    demoProjects.unshift(project)
    return project
  }

  const { data, error } = await supabase
    .from('projects')
    .insert({
      name,
      description,
      user_id: user.id,
      created_at: new Date().toISOString()
    })
    .select()
    .single()

  // Fallback to demo storage if table missing
  if (error?.code === 'PGRST205') {
    console.warn("Supabase table 'public.projects' missing; using local demo storage.")
    const project: Project = {
      id: `demo_${Date.now()}`,
      name,
      description,
      user_id: user.id,
      created_at: new Date().toISOString()
    }
    demoProjects.unshift(project)
    return project
  }

  if (error) throw error
  return data
}

export async function getProjects(): Promise<Project[]> {
  const user = getCurrentUser()

  if (isDemoMode) {
    return demoProjects.filter(p => p.user_id === user.id)
  }

  const { data, error } = await supabase
    .from('projects')
    .select('*')
    .eq('user_id', user.id)
    .order('created_at', { ascending: false })

  // Fallback to demo storage if table missing
  if (error?.code === 'PGRST205') {
    console.warn("Supabase table 'public.projects' missing; using local demo storage.")
    return demoProjects.filter(p => p.user_id === user.id)
  }

  if (error) throw error
  return data || []
}

// 脚本相关操作
export async function createScript(projectId: string, content: any[]): Promise<Script> {
  if (isDemoMode) {
    const script: Script = {
      id: `demo_script_${Date.now()}`,
      project_id: projectId,
      content,
      status: 'draft',
      created_at: new Date().toISOString()
    }
    demoScripts.unshift(script)
    return script
  }

  const { data, error } = await supabase
    .from('scripts')
    .insert({
      project_id: projectId,
      content,
      status: 'draft',
      created_at: new Date().toISOString()
    })
    .select()
    .single()

  // Fallback to demo storage if table missing
  if (error?.code === 'PGRST205') {
    console.warn("Supabase table 'public.scripts' missing; using local demo storage.")
    const script: Script = {
      id: `demo_script_${Date.now()}`,
      project_id: projectId,
      content,
      status: 'draft',
      created_at: new Date().toISOString()
    }
    demoScripts.unshift(script)
    return script
  }

  if (error) throw error
  return data
}

export async function getScripts(projectId: string): Promise<Script[]> {
  if (isDemoMode) {
    return demoScripts.filter(s => s.project_id === projectId)
  }

  const { data, error } = await supabase
    .from('scripts')
    .select('*')
    .eq('project_id', projectId)
    .order('created_at', { ascending: false })

  // Fallback to demo storage if table missing
  if (error?.code === 'PGRST205') {
    console.warn("Supabase table 'public.scripts' missing; using local demo storage.")
    return demoScripts.filter(s => s.project_id === projectId)
  }

  if (error) throw error
  return data || []
}

export async function updateScript(id: string, content: any[]): Promise<Script> {
  if (isDemoMode) {
    const index = demoScripts.findIndex(s => s.id === id)
    if (index !== -1) {
      demoScripts[index].content = content
      return demoScripts[index]
    }
    throw new Error('Script not found')
  }

  const { data, error } = await supabase
    .from('scripts')
    .update({ content })
    .eq('id', id)
    .select()
    .single()

  // Fallback to demo storage if table missing
  if (error?.code === 'PGRST205') {
    console.warn("Supabase table 'public.scripts' missing; using local demo storage.")
    const index = demoScripts.findIndex(s => s.id === id)
    if (index !== -1) {
      demoScripts[index].content = content
      return demoScripts[index]
    }
    throw new Error('Script not found')
  }

  if (error) throw error
  return data
}

// 图片相关操作
export async function createGeneratedImage(
  scriptId: string,
  prompt: string,
  imageUrl: string
): Promise<GeneratedImage> {
  if (isDemoMode) {
    const image: GeneratedImage = {
      id: `demo_img_${Date.now()}`,
      script_id: scriptId,
      prompt,
      image_url: imageUrl,
      status: 'completed',
      created_at: new Date().toISOString()
    }
    demoImages.unshift(image)
    return image
  }

  const { data, error } = await supabase
    .from('generated_images')
    .insert({
      script_id: scriptId,
      prompt,
      image_url: imageUrl,
      status: 'completed',
      created_at: new Date().toISOString()
    })
    .select()
    .single()

  // Fallback to demo storage if table missing
  if (error?.code === 'PGRST205') {
    console.warn("Supabase table 'public.generated_images' missing; using local demo storage.")
    const image: GeneratedImage = {
      id: `demo_img_${Date.now()}`,
      script_id: scriptId,
      prompt,
      image_url: imageUrl,
      status: 'completed',
      created_at: new Date().toISOString()
    }
    demoImages.unshift(image)
    return image
  }

  if (error) throw error
  return data
}

export async function getGeneratedImages(scriptId: string): Promise<GeneratedImage[]> {
  if (isDemoMode) {
    return demoImages.filter(img => img.script_id === scriptId)
  }

  const { data, error } = await supabase
    .from('generated_images')
    .select('*')
    .eq('script_id', scriptId)
    .order('created_at', { ascending: true })

  // Fallback to demo storage if table missing
  if (error?.code === 'PGRST205') {
    console.warn("Supabase table 'public.generated_images' missing; using local demo storage.")
    return demoImages.filter(img => img.script_id === scriptId)
  }

  if (error) throw error
  return data || []
}